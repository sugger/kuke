<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/8/25
 * Time: 15:12
 */

namespace partner\models;
use Yii;
use common\helpers\ArrayHelper;
class PartnerUser extends \common\models\PartnerUsers implements \yii\web\IdentityInterface
{
    public $ip,$api;
    public static $showpass=false;
    public function afterFind()
    {
        $api_ip=json_decode($this->api_ip,true);
        if ($api_ip&& $api_ip['ip'])
            $this->ip=implode("\r\n",$api_ip['ip']);
        if ($api_ip&& $api_ip['api'])
            $this->api=implode("\r\n",$api_ip['api']);
        if (!static::$showpass)$this->password='';
        parent::afterFind();
    }
    public function beforeSave($insert)
    {
        $ip=$this->ip?explode("\r\n",$this->ip):[] ;
        $api=$this->api?explode("\r\n",$this->api):[];
        $this->api_ip=json_encode(['ip'=>$ip,'api'=>$api]);


        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @param $gid 剔除的Gid
     * @return array|\yii\db\ActiveRecord[]
     *
     */
    public function Gids($gid){
        $_where="partnerid = {$this->id}";
        if ($gid) $_where .= " and gid NOT in ({$gid})";
        $games=PartnerGame::find()->select('gid')->asArray()->where($_where)->all();
//        var_dump($games);
        $games=ArrayHelper::getColumn($games,'gid');
        return $games;
    }

    /**
     * @param $gid
     * @param string $sid 剔除的sid
     * @return array|\yii\db\ActiveRecord[]
     */
    public function Sids($gid,$sid=''){
        $_where="gid = {$gid} and pid = {$this->id}";
        if ($sid) $_where .= " and sid NOT in ({$sid})";
        $games=PartnerServer::find()->select('sid')->asArray()->where($_where)->all();
//        var_dump($games);
        $games=ArrayHelper::getColumn($games,'sid');
        return $games;
    }
    /**
     * 根据UID获取账号信息
     */
    public static function findIdentity($uid)
    {
        return static::findOne(['id' => $uid, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * @inheritdoc
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');
    }

    /**
     * 根据用户名获取账号信息
     *
     * @param string $username
     * @return static|null
     */
    public static function findByUsername($username,$showPass)
    {
        return static::findOne(['username' => $username, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * Finds user by password reset token
     *
     * @param string $token password reset token
     * @return static|null
     */
    public static function findByPasswordResetToken($token)
    {
        if (!static::isPasswordResetTokenValid($token)) {
            return null;
        }

        return static::findOne([
            'password' => $token,
            'status' => self::STATUS_ACTIVE,
        ]);
    }

    /**
     * Finds out if password reset token is valid
     *
     * @param string $token password reset token
     * @return boolean
     */
    public static function isPasswordResetTokenValid($token)
    {
        if (empty($token)) {
            return false;
        }

        $timestamp = (int) substr($token, strrpos($token, '_') + 1);
        $expire = Yii::$app->params['  .passwordResetTokenExpire'];
        return $timestamp + $expire >= time();
    }

    /**
     * @inheritdoc
     */
    public function getId()
    {
        return $this->getPrimaryKey();
    }

    /**
     * @inheritdoc
     */
    public function getAuthKey()
    {
        return $this->password;
    }

    /**
     * @inheritdoc
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    /**
     * 验证密码
     *
     * @param string $password password to validate
     * @return boolean if password provided is valid for current user
     */
    public function validatePassword($password)
    {
//        $this->setPassword($password);
//        $this->save();
        return Yii::$app->security->validatePassword($password, $this->password);
    }

    /**
     * 设置加密后的密码
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password = Yii::$app->security->generatePasswordHash($password);
    }

    /**
     * 设置密码干扰码
     */
    public function generateAuthKey()
    {
        $this->salt = Yii::$app->security->generateRandomString();
    }

    /**
     * Generates new password reset token
     */
    public function generatePasswordResetToken()
    {
        $this->password = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Removes password reset token
     */
    public function removePasswordResetToken()
    {
        $this->password = null;
    }
}